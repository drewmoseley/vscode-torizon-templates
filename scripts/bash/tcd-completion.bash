# AUTOMATICALLY GENERATED by `shtab`

_shtab_zygote_xsh_subparsers=('scan' 'target' 'connect' 'new' 'init' 'tasks')
_shtab_zygote_xsh_scan_subparsers=('list' 'connect')
_shtab_zygote_xsh_target_subparsers=('get' 'set' 'console' 'reboot' 'shutdown' 'list-builtin-dto' 'list-applied-dto' 'apply-dto')
_shtab_zygote_xsh_connect_subparsers=('list')
_shtab_zygote_xsh_new_subparsers=('cli')
_shtab_zygote_xsh_tasks_subparsers=('list' 'desc' 'run')

_shtab_zygote_xsh_option_strings=('-h' '--help' '--print-completion' '--version' '-v')
_shtab_zygote_xsh_scan_option_strings=('-h' '--help')
_shtab_zygote_xsh_scan_list_option_strings=('-h' '--help')
_shtab_zygote_xsh_scan_connect_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_get_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_set_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_console_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_reboot_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_shutdown_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_list_builtin_dto_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_list_applied_dto_option_strings=('-h' '--help')
_shtab_zygote_xsh_target_apply_dto_option_strings=('-h' '--help')
_shtab_zygote_xsh_connect_option_strings=('-h' '--help')
_shtab_zygote_xsh_connect_list_option_strings=('-h' '--help')
_shtab_zygote_xsh_new_option_strings=('-h' '--help')
_shtab_zygote_xsh_new_cli_option_strings=('-h' '--help' '--template' '-t' '--name' '-n' '--container-name' '-c' '--path' '-p')
_shtab_zygote_xsh_init_option_strings=('-h' '--help')
_shtab_zygote_xsh_tasks_option_strings=('-h' '--help')
_shtab_zygote_xsh_tasks_list_option_strings=('-h' '--help')
_shtab_zygote_xsh_tasks_desc_option_strings=('-h' '--help')
_shtab_zygote_xsh_tasks_run_option_strings=('-h' '--help')



_shtab_zygote_xsh_pos_0_choices=('scan' 'target' 'connect' 'new' 'init' 'tasks')
_shtab_zygote_xsh___print_completion_choices=('bash' 'zsh' 'tcsh')
_shtab_zygote_xsh_scan_pos_0_choices=('list' 'connect')
_shtab_zygote_xsh_target_pos_0_choices=('get' 'set' 'console' 'reboot' 'shutdown' 'list-builtin-dto' 'list-applied-dto' 'apply-dto')
_shtab_zygote_xsh_connect_pos_0_choices=('list')
_shtab_zygote_xsh_new_pos_0_choices=('cli')
_shtab_zygote_xsh_tasks_pos_0_choices=('list' 'desc' 'run')

_shtab_zygote_xsh_pos_0_nargs=A...
_shtab_zygote_xsh__h_nargs=0
_shtab_zygote_xsh___help_nargs=0
_shtab_zygote_xsh___version_nargs=0
_shtab_zygote_xsh__v_nargs=0
_shtab_zygote_xsh_scan_pos_0_nargs=A...
_shtab_zygote_xsh_scan__h_nargs=0
_shtab_zygote_xsh_scan___help_nargs=0
_shtab_zygote_xsh_scan_list__h_nargs=0
_shtab_zygote_xsh_scan_list___help_nargs=0
_shtab_zygote_xsh_scan_connect__h_nargs=0
_shtab_zygote_xsh_scan_connect___help_nargs=0
_shtab_zygote_xsh_target_pos_0_nargs=A...
_shtab_zygote_xsh_target__h_nargs=0
_shtab_zygote_xsh_target___help_nargs=0
_shtab_zygote_xsh_target_get__h_nargs=0
_shtab_zygote_xsh_target_get___help_nargs=0
_shtab_zygote_xsh_target_set__h_nargs=0
_shtab_zygote_xsh_target_set___help_nargs=0
_shtab_zygote_xsh_target_console__h_nargs=0
_shtab_zygote_xsh_target_console___help_nargs=0
_shtab_zygote_xsh_target_reboot__h_nargs=0
_shtab_zygote_xsh_target_reboot___help_nargs=0
_shtab_zygote_xsh_target_shutdown__h_nargs=0
_shtab_zygote_xsh_target_shutdown___help_nargs=0
_shtab_zygote_xsh_target_list_builtin_dto__h_nargs=0
_shtab_zygote_xsh_target_list_builtin_dto___help_nargs=0
_shtab_zygote_xsh_target_list_applied_dto__h_nargs=0
_shtab_zygote_xsh_target_list_applied_dto___help_nargs=0
_shtab_zygote_xsh_target_apply_dto__h_nargs=0
_shtab_zygote_xsh_target_apply_dto___help_nargs=0
_shtab_zygote_xsh_connect_pos_0_nargs=A...
_shtab_zygote_xsh_connect__h_nargs=0
_shtab_zygote_xsh_connect___help_nargs=0
_shtab_zygote_xsh_connect_list__h_nargs=0
_shtab_zygote_xsh_connect_list___help_nargs=0
_shtab_zygote_xsh_new_pos_0_nargs=A...
_shtab_zygote_xsh_new__h_nargs=0
_shtab_zygote_xsh_new___help_nargs=0
_shtab_zygote_xsh_new_cli__h_nargs=0
_shtab_zygote_xsh_new_cli___help_nargs=0
_shtab_zygote_xsh_init__h_nargs=0
_shtab_zygote_xsh_init___help_nargs=0
_shtab_zygote_xsh_tasks_pos_0_nargs=A...
_shtab_zygote_xsh_tasks__h_nargs=0
_shtab_zygote_xsh_tasks___help_nargs=0
_shtab_zygote_xsh_tasks_list__h_nargs=0
_shtab_zygote_xsh_tasks_list___help_nargs=0
_shtab_zygote_xsh_tasks_desc__h_nargs=0
_shtab_zygote_xsh_tasks_desc___help_nargs=0
_shtab_zygote_xsh_tasks_run__h_nargs=0
_shtab_zygote_xsh_tasks_run___help_nargs=0


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# set default values (called for the initial parser & any subparsers)
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  sub_parsers=${!subparsers_var-}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=positional action (bool)
# set all identifiers for an action's parameters
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var-}"

  ### NON GENERATED CODE ###
  if [[ "$current_action" == "_shtab_zygote_xsh_tasks_desc_pos_0" || "$current_action" == "_shtab_zygote_xsh_tasks_run_pos_0" ]]; then
    current_action_choices=$(jq -r '.tasks[].label' ./.vscode/tasks.json)
  else
    local current_action_choices_var="${current_action}_choices[@]"
    current_action_choices="${!current_action_choices_var-}"
  fi
  ### NON GENERATED CODE ###

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var-}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(( $word_index + 1 - $pos_only ))

  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY`: what will be rendered after completion is triggered
# `completing_word`: currently typed word to generate completions for
# `${!var}`: evaluates the content of `var` and expand its content as a variable
#     hello="world"
#     x="hello"
#     ${!x} -> ${hello} -> "world"
_shtab_zygote_xsh() {
  local completing_word="${COMP_WORDS[COMP_CWORD]}"
  local completed_positional_actions
  local current_action
  local current_action_args_start_index
  local current_action_choices
  local current_action_compgen
  local current_action_is_positional
  local current_action_nargs
  local current_option_strings
  local sub_parsers
  COMPREPLY=()

  local prefix=_shtab_zygote_xsh
  local word_index=0
  local pos_only=0 # "--" delimeter not encountered yet
  _set_parser_defaults
  word_index=1

  # determine what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]; do
    local this_word="${COMP_WORDS[$word_index]}"

    if [[ $pos_only = 1 || " $this_word " != " -- " ]]; then
      if [[ -n $sub_parsers && " ${sub_parsers[@]} " == *" ${this_word} "* ]]; then
        # valid subcommand: add it to the prefix & reset the current action
        prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
        _set_parser_defaults
      fi

      if [[ " ${current_option_strings[@]} " == *" ${this_word} "* ]]; then
        # a new action should be acquired (due to recognised option string or
        # no more input expected from current action);
        # the next positional action can fill in here
        _set_new_action $this_word false
      fi

      if [[ "$current_action_nargs" != "*" ]] && \
         [[ "$current_action_nargs" != "+" ]] && \
         [[ "$current_action_nargs" != *"..." ]] && \
         (( $word_index + 1 - $current_action_args_start_index - $pos_only >= \
            $current_action_nargs )); then
        $current_action_is_positional && let "completed_positional_actions += 1"
        _set_new_action "pos_${completed_positional_actions}" true
      fi
    else
      pos_only=1 # "--" delimeter encountered
    fi

    let "word_index+=1"
  done

  # Generate the completions

  if [[ $pos_only = 0 && "${completing_word}" == -* ]]; then
    # optional argument started: use option strings
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  else
    # use choices & compgen
    local IFS=$'\n' # items may contain spaces, so delimit using newline
    COMPREPLY=( $([ -n "${current_action_compgen}" ] \
                  && "${current_action_compgen}" "${completing_word}") )
    unset IFS
    COMPREPLY+=( $(compgen -W "${current_action_choices[*]}" -- "${completing_word}") )
  fi

  return 0
}

complete -o filenames -F _shtab_zygote_xsh torizon-dev
